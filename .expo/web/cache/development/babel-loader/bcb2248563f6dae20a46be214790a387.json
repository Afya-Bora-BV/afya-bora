{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Desktop/inspiredideas/afya-bora/src/internals/auth/context.tsx\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from 'react';\nimport create from 'zustand';\nimport createContext from 'zustand/context';\nimport { persist } from \"zustand/middleware\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport Platform from \"react-native-web/dist/exports/Platform\";\n\nvar _createContext = createContext(),\n    Provider = _createContext.Provider,\n    useStore = _createContext.useStore;\n\nvar sleep = function sleep(delay) {\n  return new Promise(function (resolve) {\n    return setTimeout(resolve, delay);\n  });\n};\n\nvar createAuthStore = function createAuthStore() {\n  return create(persist(function (set, get) {\n    return {\n      user: null,\n      signInWithEmailAndPassword: function signInWithEmailAndPassword(email, password) {\n        return _regeneratorRuntime.async(function signInWithEmailAndPassword$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return _regeneratorRuntime.awrap(sleep(3000));\n\n              case 2:\n                set({\n                  user: {\n                    uid: \"asda\",\n                    name: \"George Millanzi\"\n                  }\n                });\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      },\n      signInWithPhoneNumber: function signInWithPhoneNumber(phoneNumber) {\n        return _regeneratorRuntime.async(function signInWithPhoneNumber$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      },\n      confirmPhoneCode: function confirmPhoneCode(code) {\n        return _regeneratorRuntime.async(function confirmPhoneCode$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                setInterval(function () {\n                  set({\n                    user: {\n                      uid: \"r31e4\",\n                      name: \"Raghav\"\n                    }\n                  });\n                }, 2000);\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      }\n    };\n  }, {\n    name: \"authState\",\n    getStorage: function getStorage() {\n      return Platform.OS !== \"web\" ? AsyncStorage : sessionStorage;\n    }\n  }));\n};\n\nfunction AuthProvider(_ref) {\n  var children = _ref.children;\n  return React.createElement(Provider, {\n    createStore: createAuthStore,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, children);\n}\n\nexport { useStore as useAuthStore, AuthProvider };","map":{"version":3,"sources":["/Users/mac/Desktop/inspiredideas/afya-bora/src/internals/auth/context.tsx"],"names":["React","create","createContext","persist","AsyncStorage","Provider","useStore","sleep","delay","Promise","resolve","setTimeout","createAuthStore","set","get","user","signInWithEmailAndPassword","email","password","uid","name","signInWithPhoneNumber","phoneNumber","confirmPhoneCode","code","setInterval","getStorage","Platform","OS","sessionStorage","AuthProvider","children","useAuthStore"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,SAAnB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,SAASC,OAAT,QAAwB,oBAAxB;AAEA,OAAOC,YAAP,MAAyB,2CAAzB;;;AAyBA,qBAA+BF,aAAa,EAA5C;AAAA,IAAQG,QAAR,kBAAQA,QAAR;AAAA,IAAkBC,QAAlB,kBAAkBA,QAAlB;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAACC,KAAD;AAAA,SAAmB,IAAIC,OAAJ,CAAY,UAACC,OAAD;AAAA,WAAaC,UAAU,CAACD,OAAD,EAAUF,KAAV,CAAvB;AAAA,GAAZ,CAAnB;AAAA,CAAd;;AAGA,IAAMI,eAAe,GAAG,SAAlBA,eAAkB;AAAA,SAAMX,MAAM,CAAYE,OAAO,CAAC,UAACU,GAAD,EAAMC,GAAN;AAAA,WAAe;AACnEC,MAAAA,IAAI,EAAE,IAD6D;AAInEC,MAAAA,0BAA0B,EAAE,oCAAgBC,KAAhB,EAAuBC,QAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iDAClBX,KAAK,CAAC,IAAD,CADa;;AAAA;AAIxBM,gBAAAA,GAAG,CAAC;AACAE,kBAAAA,IAAI,EAAE;AACFI,oBAAAA,GAAG,EAAE,MADH;AAEFC,oBAAAA,IAAI,EAAE;AAFJ;AADN,iBAAD,CAAH;;AAJwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAJuC;AAiBnEC,MAAAA,qBAAqB,EAAE,+BAAgBC,WAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAjB4C;AAsBnEC,MAAAA,gBAAgB,EAAE,0BAAgBC,IAAhB;AAAA;AAAA;AAAA;AAAA;AAEdC,gBAAAA,WAAW,CAAC,YAAM;AAGdZ,kBAAAA,GAAG,CAAC;AACAE,oBAAAA,IAAI,EAAE;AACFI,sBAAAA,GAAG,EAAE,OADH;AAEFC,sBAAAA,IAAI,EAAE;AAFJ;AADN,mBAAD,CAAH;AAMH,iBATU,EASR,IATQ,CAAX;;AAFc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAtBiD,KAAf;AAAA,GAAD,EAmCnD;AACAA,IAAAA,IAAI,EAAE,WADN;AAEAM,IAAAA,UAAU,EAAE;AAAA,aAAMC,QAAQ,CAACC,EAAT,KAAgB,KAAhB,GAAwBxB,YAAxB,GAAuCyB,cAA7C;AAAA;AAFZ,GAnCmD,CAAnB,CAAZ;AAAA,CAAxB;;AAyCA,SAASC,YAAT,OAAuD;AAAA,MAA/BC,QAA+B,QAA/BA,QAA+B;AACnD,SACI,oBAAC,QAAD;AAAU,IAAA,WAAW,EAAEnB,eAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKmB,QADL,CADJ;AAKH;;AAGD,SACIzB,QAAQ,IAAI0B,YADhB,EAEIF,YAFJ","sourcesContent":["import React from 'react'\nimport create from 'zustand'\nimport createContext from 'zustand/context'\nimport { persist } from \"zustand/middleware\"\n\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { Platform } from 'react-native';\n/**\n * User object\n */\ninterface User {\n    uid: string\n    name: string\n    image?: string\n}\n\n/**\n * Authentication store\n */\ninterface AuthStore {\n    user:\n    | undefined // User doesn't exist yet\n    | User      // user exist and logged in\n    | null      // user logged out\n\n    signInWithEmailAndPassword: (email: string, password: string) => Promise<void>\n    signInWithPhoneNumber: (phoneNumber: string) => Promise<void>\n    confirmPhoneCode: (code: string) => Promise<void>\n}\n\nconst { Provider, useStore } = createContext<AuthStore>()\n\nconst sleep = (delay: number) => new Promise((resolve) => setTimeout(resolve, delay))\n\n\nconst createAuthStore = () => create<AuthStore>(persist((set, get) => ({\n    user: null,\n\n    // THINK: appropriate might be `setUser`\n    signInWithEmailAndPassword: async function (email, password) {\n        await sleep(3000)\n        // TODO: fetch name and other related information\n        // create the fake user \n        set({\n            user: {\n                uid: \"asda\",\n                name: \"George Millanzi\",\n            } as User\n        })\n    },\n\n    // Signing in for user\n    signInWithPhoneNumber: async function (phoneNumber) {\n\n    },\n\n    // confirming code\n    confirmPhoneCode: async function (code) {\n        // create fake person after 2 seconds\n        setInterval(() => {\n            // NOTE: if user is set, it forces the state of `user` in the \n            //  `App.tsx -> <Main />` to change, thus forcing a login\n            set({\n                user: {\n                    uid: \"r31e4\",\n                    name: \"Raghav\",\n                } as User\n            })\n        }, 2000)\n    }\n}), {\n    name: \"authState\",\n    getStorage: () => Platform.OS !== \"web\" ? AsyncStorage : sessionStorage\n}))\n\ninterface AuthProviderProps { children?: React.ReactElement }\nfunction AuthProvider({ children }: AuthProviderProps) {\n    return (\n        <Provider createStore={createAuthStore}>\n            {children}\n        </Provider>\n    )\n}\n\n\nexport {\n    useStore as useAuthStore,\n    AuthProvider\n}\n"]},"metadata":{},"sourceType":"module"}