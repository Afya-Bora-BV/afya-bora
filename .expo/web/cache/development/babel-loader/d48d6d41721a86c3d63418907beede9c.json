{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/mac/Desktop/inspiredideas/afya-bora/src/views/Home/MapFacility/FindFacility.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport { useNavigation } from \"@react-navigation/native\";\n\nvar _Dimensions$get = Dimensions.get(\"window\"),\n    width = _Dimensions$get.width,\n    height = _Dimensions$get.height;\n\nvar CARD_HEIGHT = 200;\nvar CARD_WIDTH = width * 0.8;\nvar SPACING_FOR_CARD_INSET = width * 0.1 - 10;\nexport var markers = [{\n  coordinate: {\n    latitude: 22.6293867,\n    longitude: 88.4354486\n  },\n  title: \"Amazing Food Place\",\n  description: \"This is the best food place\"\n}, {\n  coordinate: {\n    latitude: 22.6345648,\n    longitude: 88.4377279\n  },\n  title: \"Second Amazing Food Place\",\n  description: \"This is the second best food place\"\n}, {\n  coordinate: {\n    latitude: 22.6281662,\n    longitude: 88.4410113\n  },\n  title: \"Third Amazing Food Place\",\n  description: \"This is the third best food place\"\n}, {\n  coordinate: {\n    latitude: 22.6341137,\n    longitude: 88.4497463\n  },\n  title: \"Fourth Amazing Food Place\",\n  description: \"This is the fourth best food place\"\n}, {\n  coordinate: {\n    latitude: 22.6292757,\n    longitude: 88.444781\n  },\n  title: \"Fifth Amazing Food Place\",\n  description: \"This is the fifth best food place\"\n}];\nvar region = {\n  latitude: 22.62938671242907,\n  longitude: 88.4354486029795,\n  latitudeDelta: 0.04864195044303443,\n  longitudeDelta: 0.040142817690068\n};\nvar initialState = {\n  markers: markers,\n  region: region\n};\n\nvar FindFacility = function FindFacility() {\n  var _useNavigation = useNavigation(),\n      navigate = _useNavigation.navigate;\n\n  var mapIndex = 0;\n  var mapAnimation = new Animated.Value(0);\n\n  var _React$useState = React.useState(initialState),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      state = _React$useState2[0],\n      setState = _React$useState2[1];\n\n  var _map = React.useRef(null);\n\n  var _scrollView = React.useRef(null);\n\n  React.useEffect(function () {\n    mapAnimation.addListener(function (_ref) {\n      var value = _ref.value;\n      var index = Math.floor(value / CARD_WIDTH + 0.3);\n\n      if (index >= state.markers.length) {\n        index = state.markers.length - 1;\n      }\n\n      if (index <= 0) {\n        index = 0;\n      }\n\n      var regionTimeout = setTimeout(function () {\n        if (mapIndex !== index) {\n          var _map$current;\n\n          mapIndex = index;\n          var coordinate = state.markers[index].coordinate;\n          (_map$current = _map.current) == null ? void 0 : _map$current.animateToRegion(_objectSpread(_objectSpread({}, coordinate), {}, {\n            latitudeDelta: state.region.latitudeDelta,\n            longitudeDelta: state.region.longitudeDelta\n          }), 350);\n        }\n      }, 10);\n      clearTimeout(regionTimeout);\n    });\n  });\n  var interpolations = state.markers.map(function (marker, index) {\n    var inputRange = [(index - 1) * CARD_WIDTH, index * CARD_WIDTH, (index + 1) * CARD_WIDTH];\n    var scale = mapAnimation.interpolate({\n      inputRange: inputRange,\n      outputRange: [1, 1.5, 1],\n      extrapolate: \"clamp\"\n    });\n    return {\n      scale: scale\n    };\n  });\n\n  var onMarkerPress = function onMarkerPress(mapEventData) {\n    var markerID = mapEventData._targetInst.return.key;\n    var x = markerID * CARD_WIDTH + markerID * 20;\n\n    if (Platform.OS === 'ios') {\n      x = x - SPACING_FOR_CARD_INSET;\n    }\n\n    _scrollView.current.scrollTo({\n      x: x,\n      y: 0,\n      animated: true\n    });\n  };\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 3\n    }\n  }, React.createElement(Animated.ScrollView, {\n    ref: _scrollView,\n    horizontal: true,\n    pagingEnabled: true,\n    scrollEventThrottle: 1,\n    showsHorizontalScrollIndicator: false,\n    snapToInterval: CARD_WIDTH + 20,\n    snapToAlignment: \"center\",\n    style: styles.scrollView,\n    contentInset: {\n      top: 0,\n      left: SPACING_FOR_CARD_INSET,\n      bottom: 0,\n      right: SPACING_FOR_CARD_INSET\n    },\n    contentContainerStyle: {\n      paddingHorizontal: Platform.OS === 'android' ? SPACING_FOR_CARD_INSET : 0\n    },\n    onScroll: Animated.event([{\n      nativeEvent: {\n        contentOffset: {\n          x: mapAnimation\n        }\n      }\n    }], {\n      useNativeDriver: true\n    }),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 4\n    }\n  }, state.markers.map(function (marker, index) {\n    return React.createElement(Pressable, {\n      onPress: function onPress() {\n        console.log(\"Pressed map carc : \", marker);\n        navigate(\"FindFacilityList\", {\n          facility: marker\n        });\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 6\n      }\n    }, React.createElement(View, {\n      style: styles.card,\n      key: index,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 7\n      }\n    }));\n  })));\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  map: {\n    width: \"100%\",\n    height: \"100%\"\n  },\n  scrollView: {\n    position: \"absolute\",\n    bottom: 0,\n    left: 0,\n    right: 0,\n    paddingVertical: 10\n  },\n  card: {\n    elevation: 2,\n    backgroundColor: \"#FFF\",\n    borderTopLeftRadius: 5,\n    borderTopRightRadius: 5,\n    marginHorizontal: 10,\n    shadowColor: \"#000\",\n    shadowRadius: 5,\n    shadowOpacity: 0.3,\n    shadowOffset: {\n      width: 2,\n      height: -2\n    },\n    height: CARD_HEIGHT,\n    width: CARD_WIDTH,\n    overflow: \"hidden\"\n  }\n});\nexport default FindFacility;","map":{"version":3,"sources":["/Users/mac/Desktop/inspiredideas/afya-bora/src/views/Home/MapFacility/FindFacility.tsx"],"names":["React","useNavigation","Dimensions","get","width","height","CARD_HEIGHT","CARD_WIDTH","SPACING_FOR_CARD_INSET","markers","coordinate","latitude","longitude","title","description","region","latitudeDelta","longitudeDelta","initialState","FindFacility","navigate","mapIndex","mapAnimation","Animated","Value","useState","state","setState","_map","useRef","_scrollView","useEffect","addListener","value","index","Math","floor","length","regionTimeout","setTimeout","current","animateToRegion","clearTimeout","interpolations","map","marker","inputRange","scale","interpolate","outputRange","extrapolate","onMarkerPress","mapEventData","markerID","_targetInst","return","key","x","Platform","OS","scrollTo","y","animated","styles","container","scrollView","top","left","bottom","right","paddingHorizontal","event","nativeEvent","contentOffset","useNativeDriver","console","log","facility","card","StyleSheet","create","flex","position","paddingVertical","elevation","backgroundColor","borderTopLeftRadius","borderTopRightRadius","marginHorizontal","shadowColor","shadowRadius","shadowOpacity","shadowOffset","overflow"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport MapView, { Marker } from \"react-native-maps\";\nimport { StyleSheet, Text, View, Dimensions, Animated, Platform, Pressable } from \"react-native\";\nimport { Box, HStack, ScrollView, ZStack } from \"native-base\";\nimport { useNavigation } from \"@react-navigation/native\";\n\nconst { width, height } = Dimensions.get(\"window\");\nconst CARD_HEIGHT = 200;\nconst CARD_WIDTH = width * 0.8;\nconst SPACING_FOR_CARD_INSET = width * 0.1 - 10;\n\n\nexport const markers = [\n\t{\n\t\tcoordinate: {\n\t\t\tlatitude: 22.6293867,\n\t\t\tlongitude: 88.4354486,\n\t\t},\n\t\ttitle: \"Amazing Food Place\",\n\t\tdescription: \"This is the best food place\",\n\t},\n\t{\n\t\tcoordinate: {\n\t\t\tlatitude: 22.6345648,\n\t\t\tlongitude: 88.4377279,\n\t\t},\n\t\ttitle: \"Second Amazing Food Place\",\n\t\tdescription: \"This is the second best food place\",\n\t},\n\t{\n\t\tcoordinate: {\n\t\t\tlatitude: 22.6281662,\n\t\t\tlongitude: 88.4410113,\n\t\t},\n\t\ttitle: \"Third Amazing Food Place\",\n\t\tdescription: \"This is the third best food place\",\n\t},\n\t{\n\t\tcoordinate: {\n\t\t\tlatitude: 22.6341137,\n\t\t\tlongitude: 88.4497463,\n\t\t},\n\t\ttitle: \"Fourth Amazing Food Place\",\n\t\tdescription: \"This is the fourth best food place\",\n\t},\n\t{\n\t\tcoordinate: {\n\t\t\tlatitude: 22.6292757,\n\t\t\tlongitude: 88.444781,\n\t\t},\n\t\ttitle: \"Fifth Amazing Food Place\",\n\t\tdescription: \"This is the fifth best food place\",\n\n\t},\n];\n\nconst region = {\n\tlatitude: 22.62938671242907,\n\tlongitude: 88.4354486029795,\n\tlatitudeDelta: 0.04864195044303443,\n\tlongitudeDelta: 0.040142817690068,\n}\n\nconst initialState = {\n\tmarkers,\n\tregion\n}\nconst FindFacility: React.FC = () => {\n\n\tconst { navigate } = useNavigation()\n\tlet mapIndex = 0;\n\tlet mapAnimation = new Animated.Value(0);\n\tconst [state, setState] = React.useState(initialState);\n\n\tconst _map = React.useRef(null);\n\tconst _scrollView = React.useRef(null);\n\n\tReact.useEffect(() => {\n\t\tmapAnimation.addListener(({ value }) => {\n\t\t\tlet index = Math.floor(value / CARD_WIDTH + 0.3); // animate 30% away from landing on the next item\n\t\t\tif (index >= state.markers.length) {\n\t\t\t\tindex = state.markers.length - 1;\n\t\t\t}\n\t\t\tif (index <= 0) {\n\t\t\t\tindex = 0;\n\t\t\t}\n\t\t\tconst regionTimeout = setTimeout(() => {\n\t\t\t\tif (mapIndex !== index) {\n\t\t\t\t\tmapIndex = index;\n\t\t\t\t\tconst { coordinate } = state.markers[index];\n\t\t\t\t\t_map.current?.animateToRegion(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t...coordinate,\n\t\t\t\t\t\t\tlatitudeDelta: state.region.latitudeDelta,\n\t\t\t\t\t\t\tlongitudeDelta: state.region.longitudeDelta,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t350\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}, 10);\n\n\t\t\tclearTimeout(regionTimeout);\n\n\n\t\t});\n\t});\n\n\tconst interpolations = state.markers.map((marker, index) => {\n\t\tconst inputRange = [\n\t\t\t(index - 1) * CARD_WIDTH,\n\t\t\tindex * CARD_WIDTH,\n\t\t\t((index + 1) * CARD_WIDTH),\n\t\t];\n\n\t\tconst scale = mapAnimation.interpolate({\n\t\t\tinputRange,\n\t\t\toutputRange: [1, 1.5, 1],\n\t\t\textrapolate: \"clamp\"\n\t\t});\n\n\t\treturn { scale };\n\t});\n\n\tconst onMarkerPress = (mapEventData: any) => {\n\t\tconst markerID = mapEventData._targetInst.return.key;\n\n\t\tlet x = (markerID * CARD_WIDTH) + (markerID * 20);\n\t\tif (Platform.OS === 'ios') {\n\t\t\tx = x - SPACING_FOR_CARD_INSET;\n\t\t}\n\n\t\t_scrollView.current.scrollTo({ x: x, y: 0, animated: true });\n\t}\n\n\treturn (\n\t\t<View style={styles.container}>\n\t\t\t{/* <MapView\n\t\t\t\tref={_map}\n\t\t\t\tstyle={styles.map}\n\t\t\t\tinitialRegion={state.region}\n\n\t\t\t>\n\t\t\t\t{state.markers.map((marker, index) => {\n\t\t\t\t\tconst scaleStyle = {\n\t\t\t\t\t\ttransform: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tscale: interpolations[index].scale,\n\t\t\t\t\t\t\t},\n\n\t\t\t\t\t\t],\n\t\t\t\t\t};\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Marker\n\t\t\t\t\t\t\tkey={index} coordinate={marker.coordinate} onPress={(e) => onMarkerPress(e)}\n\t\t\t\t\t\t\ttitle={`Hospital ${index}`}\n\t\t\t\t\t\t\tdescription={`Descriptio ${index}`}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Animated.View style={{\n\t\t\t\t\t\t\t\talignItems: \"center\",\n\t\t\t\t\t\t\t\tjustifyContent: \"center\",\n\t\t\t\t\t\t\t\twidth: 50,\n\t\t\t\t\t\t\t\theight: 50,\n\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t\t<Animated.Image\n\t\t\t\t\t\t\t\t\tsource={require('../../../assets/images/pin.png')}\n\t\t\t\t\t\t\t\t\tstyle={[{\n\t\t\t\t\t\t\t\t\t\talignItems: \"center\",\n\t\t\t\t\t\t\t\t\t\tjustifyContent: \"center\",\n\t\t\t\t\t\t\t\t\t\twidth: 38,\n\t\t\t\t\t\t\t\t\t\theight: 38,\n\t\t\t\t\t\t\t\t\t}, scaleStyle]}\n\t\t\t\t\t\t\t\t\tresizeMode=\"cover\"\n\t\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t</Animated.View>\n\t\t\t\t\t\t</Marker>\n\n\t\t\t\t\t)\n\t\t\t\t})}\n\n\t\t\t</MapView> */}\n\n\t\t\t<Animated.ScrollView\n\t\t\t\tref={_scrollView}\n\t\t\t\thorizontal\n\t\t\t\tpagingEnabled\n\t\t\t\tscrollEventThrottle={1}\n\t\t\t\tshowsHorizontalScrollIndicator={false}\n\t\t\t\tsnapToInterval={CARD_WIDTH + 20}\n\t\t\t\tsnapToAlignment=\"center\"\n\t\t\t\tstyle={styles.scrollView}\n\t\t\t\tcontentInset={{\n\t\t\t\t\ttop: 0,\n\t\t\t\t\tleft: SPACING_FOR_CARD_INSET,\n\t\t\t\t\tbottom: 0,\n\t\t\t\t\tright: SPACING_FOR_CARD_INSET\n\t\t\t\t}}\n\t\t\t\tcontentContainerStyle={{\n\t\t\t\t\tpaddingHorizontal: Platform.OS === 'android' ? SPACING_FOR_CARD_INSET : 0\n\t\t\t\t}}\n\t\t\t\tonScroll={Animated.event(\n\t\t\t\t\t[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tnativeEvent: {\n\t\t\t\t\t\t\t\tcontentOffset: {\n\t\t\t\t\t\t\t\t\tx: mapAnimation,\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\t{ useNativeDriver: true }\n\t\t\t\t)}\n\t\t\t>\n\t\t\t\t{state.markers.map((marker, index) => (\n\t\t\t\t\t<Pressable onPress={() => {\n\t\t\t\t\t\tconsole.log(\"Pressed map carc : \", marker)\n\t\t\t\t\t\t// TODO: taking this to a separate method\n\t\t\t\t\t\tnavigate(\"FindFacilityList\", { facility: marker })\n\t\t\t\t\t}}>\n\t\t\t\t\t\t<View style={styles.card} key={index}>\n\t\t\t\t\t\t\t{/* <Box\n\t\t\t\t\t\t\th=\"full\"\n\t\t\t\t\t\t\tw=\"full\"\n\t\t\t\t\t\t\tborderRadius={6}\n\t\t\t\t\t\t\tshadow={2}\n\t\t\t\t\t\t\tmx={2}\n\t\t\t\t\t\t\tbackgroundColor=\"white\"\n\t\t\t\t\t\t></Box> */}\n\t\t\t\t\t\t</View>\n\t\t\t\t\t</Pressable>\n\t\t\t\t))}\n\t\t\t</Animated.ScrollView>\n\n\t\t</View>\n\t);\n};\n\n\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tflex: 1,\n\t},\n\tmap: {\n\t\twidth: \"100%\",\n\t\theight: \"100%\",\n\t},\n\tscrollView: {\n\t\tposition: \"absolute\",\n\t\tbottom: 0,\n\t\tleft: 0,\n\t\tright: 0,\n\t\tpaddingVertical: 10,\n\t},\n\tcard: {\n\t\t// padding: 10,\n\t\televation: 2,\n\t\tbackgroundColor: \"#FFF\",\n\t\tborderTopLeftRadius: 5,\n\t\tborderTopRightRadius: 5,\n\t\tmarginHorizontal: 10,\n\t\tshadowColor: \"#000\",\n\t\tshadowRadius: 5,\n\t\tshadowOpacity: 0.3,\n\t\tshadowOffset: { width: 2, height: -2 },\n\t\theight: CARD_HEIGHT,\n\t\twidth: CARD_WIDTH,\n\t\toverflow: \"hidden\",\n\t},\n});\n\nexport default  FindFacility;\n"]},"metadata":{},"sourceType":"module"}